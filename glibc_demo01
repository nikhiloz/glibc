#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <math.h>
#include <unistd.h>
#include <time.h>
#include <errno.h>
#include <signal.h>
#include <sys/socket.h>
#include <netinet/in.h>

void memory_demo() {
    char *buffer = (char *)malloc(100);
    if (buffer) {
        strcpy(buffer, "Hello, glibc!");
        printf("Buffer: %s\n", buffer);
        free(buffer);
    }
}

void string_demo() {
    const char *src = "glibc example";
    char dest[50];
    strcpy(dest, src);
    printf("Copied string: %s (length: %zu)\n", dest, strlen(dest));
    printf("Compare: %d\n", strcmp(src, dest));
    strcat(dest, " functions");
    printf("Concatenated: %s\n", dest);
}

void file_demo() {
    FILE *fp = fopen("test.txt", "w");
    if (fp) {
        fprintf(fp, "Written using glibc functions!\n");
        fclose(fp);
    }
    fp = fopen("test.txt", "r");
    if (fp) {
        char line[100];
        fgets(line, sizeof(line), fp);
        printf("Read from file: %s", line);
        fclose(fp);
    }
}

void process_demo() {
    pid_t pid = fork();
    if (pid == 0) {
        printf("Child process, PID=%d\n", getpid());
        exit(0);
    } else if (pid > 0) {
        printf("Parent process, PID=%d, child PID=%d\n", getpid(), pid);
        wait(NULL);
    } else {
        perror("fork");
    }
}

void math_demo() {
    double x = 2.0;
    printf("sqrt(%f) = %f\n", x, sqrt(x));
    printf("pow(%f, %f) = %f\n", x, x, pow(x, x));
    printf("sin(%f) = %f\n", x, sin(x));
}

void time_demo() {
    time_t now = time(NULL);
    printf("Current time: %s", ctime(&now));
    struct tm *tm_info = localtime(&now);
    printf("Year: %d\n", tm_info->tm_year + 1900);
}

void env_demo() {
    const char *home = getenv("HOME");
    printf("HOME: %s\n", home ? home : "not set");
    setenv("MYVAR", "123", 1);
    printf("MYVAR: %s\n", getenv("MYVAR"));
    unsetenv("MYVAR");
}

void* thread_func(void* arg) {
    printf("Hello from thread! Arg: %s\n", (char*)arg);
    return NULL;
}

void thread_demo() {
    pthread_t tid;
    char message[] = "Thread argument";
    pthread_create(&tid, NULL, thread_func, message);
    pthread_join(tid, NULL);
}

void signal_handler(int signo) {
    printf("Received signal: %d\n", signo);
}

void signal_demo() {
    signal(SIGINT, signal_handler);
    printf("Press Ctrl+C to send SIGINT...\n");
    sleep(2);
}

void socket_demo() {
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == -1) {
        perror("socket");
        return;
    }
    printf("Socket created (fd=%d)\n", sock);
    close(sock);
}

int main() {
    printf("glibc major functions demo:\n");
    memory_demo();
    string_demo();
    file_demo();
    process_demo();
    math_demo();
    time_demo();
    env_demo();
    thread_demo();
    signal_demo();
    socket_demo();
    return 0;
}